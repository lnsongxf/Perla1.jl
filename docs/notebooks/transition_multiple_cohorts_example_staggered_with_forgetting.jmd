
```julia
using LinearAlgebra, Test, SparseArrays, Plots, Parameters, OffsetArrays, DifferentialEquations, IterativeSolvers, LinearMaps
using Plots, BenchmarkTools, Perla1, DiffEqOperators
```

```julia
# two firms per cohort
t_2 = 5.0
θ_1 = 0.4
θ_2 = 0.6
θ(t) = t < t_2 ? θ_1 : θ_2
t = 0.0
N = 2
T = 50.0
ζ = 0.1 # forgetting rate
cohorts = (N, N)
ts_cohort = [t_2]
f_0 = [1.0; fill(0.0, (N+1)^2-1)];
params = (θ = θ, cohorts = cohorts, ts_cohort = ts_cohort, ζ = ζ);
```

# Using matrix free operators

```julia
K = length(cohorts) # number of cohorts
setsize = (N+1)^K;
O! = get_transition_operator(params)
```

```julia
# solve the corresponding ODE
sol_awareness_matrix_free = solve_transition_dynamics(O!, params, f_0, T)
K = length(cohorts) # number of cohorts

# convert to the counting solution
indices = CartesianIndices(reshape(1:setsize, Tuple(fill(0:N, K))))
counts = (x -> sum(indices[x])).(1:setsize) # index to count size

f0_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 0]) # no product
f1_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 1]) # 1 product
f2_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 2]) # 2 products
f3_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 3]) # 3 products
f4_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 4]) # 4 products

# plot
plot(0:0.01:T, [f0_awareness_matrix_free, f1_awareness_matrix_free, f2_awareness_matrix_free,
        f3_awareness_matrix_free, f4_awareness_matrix_free],linewidth=5,
    title="Solution (using awareness set transition)",
     xaxis="t",yaxis="f(t)",label=["f0" "f1" "f2" "f3" "f4"])
```


## Find stationary distribution

### Using matrix-free operator

```julia
map_matfree! = LinearMap((y,x) -> transition_operator_base!(y, x, params, T), length(f_0); ismutating=true)
stationary, history = @btime gmres!(fill(1/length(f_0), length(f_0)), map_matfree!, similar(f_0), log = true)
stationary /= sum(stationary) # normalize
plot(history, yscale = :log10,linewidth=2,
    title="GMRES, using matrix-free operator",
    xaxis="iteration",yaxis="resnorm")
```

# With 3 cohorts

```julia
t_3 = 2*t_2
θ_3 = 1.2
cohorts = (N, N, N)
ts_cohort = [t_2; t_3]
θ(t) = t < t_2 ? θ_1 : (t < t_3 ? θ_2 : θ_3)
T = t_3*5

params = (θ = θ, cohorts = cohorts, ts_cohort = ts_cohort, ζ = ζ)
K = length(cohorts) # number of cohorts
f_0 = [1.0; fill(0.0, (N+1)^K-1)]
setsize = length(f_0)

# solve the corresponding ODE
O! = get_transition_operator(params)
sol_awareness_matrix_free = solve_transition_dynamics(O!, params, f_0, T)

# convert to the counting solution
indices = CartesianIndices(reshape(1:setsize, Tuple(fill(0:N, K))))
counts = (x -> sum(indices[x])).(1:setsize) # index to count size

f0_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 0]) # no product
f1_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 1]) # 1 product
f2_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 2]) # 2 products
f3_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 3]) # 3 products
f4_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 4]) # 4 products
f5_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 5]) # 5 products
f6_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 6]) # 5 products

# plot
plot(0:0.01:(10*t_2), [f0_awareness_matrix_free, f1_awareness_matrix_free, f2_awareness_matrix_free,
        f3_awareness_matrix_free, f4_awareness_matrix_free, f5_awareness_matrix_free, f6_awareness_matrix_free],linewidth=5,
    title="Solution (using awareness set transition)",
     xaxis="t",yaxis="f(t)",label=["f0" "f1" "f2" "f3" "f4" "f5" "f6"])
```

# With 4 cohorts

```julia
t_4 = 3*t_2
θ_4 = 1.5
cohorts = (N, N, N, N)
ts_cohort = [t_2; t_3; t_4]
θ(t) = t < t_2 ? θ_1 : (t < t_3 ? θ_2 : (t < t_4 ? θ_3 : θ_4))
T = t_4*10

params = (θ = θ, cohorts = cohorts, ts_cohort = ts_cohort, ζ = ζ)
K = length(cohorts) # number of cohorts
f_0 = [1.0; fill(0.0, (N+1)^K-1)]
setsize = length(f_0)

# solve the corresponding ODE
O! = get_transition_operator(params)
sol_awareness_matrix_free = solve_transition_dynamics(O!, params, f_0, T)

# convert to the counting solution
setsize = length(f_0)
indices = CartesianIndices(reshape(1:setsize, Tuple(fill(0:N, K))))
counts = (x -> sum(indices[x])).(1:setsize) # index to count size

f0_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 0]) # no product
f1_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 1]) # 1 product
f2_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 2]) # 2 products
f3_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 3]) # 3 products
f4_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 4]) # 4 products
f5_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 5]) # 5 products
f6_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 6]) # 6 products
f7_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 7]) # 7 products
f8_awareness_matrix_free(a) = sum(sol_awareness_matrix_free(a)[counts .== 8]) # 8 products

# plot
plot(0:0.01:(10*t_2), [f0_awareness_matrix_free, f1_awareness_matrix_free, f2_awareness_matrix_free,
        f3_awareness_matrix_free, f4_awareness_matrix_free, f5_awareness_matrix_free,
        f6_awareness_matrix_free, f7_awareness_matrix_free, f8_awareness_matrix_free],linewidth=5,
    title="Solution (using awareness set transition)",
     xaxis="t",yaxis="f(t)",label=["f0" "f1" "f2" "f3" "f4" "f5" "f6" "f7" "f8"])
```

## Find stationary distribution

```julia
map_matfree! = LinearMap((y,x) -> transition_operator_base!(y, x, params, T), length(f_0); ismutating=true)
stationary, history = @btime gmres!(fill(1/length(f_0), length(f_0)), map_matfree!, similar(f_0), log = true)
stationary /= sum(stationary) # normalize
plot(history, yscale = :log10,linewidth=2,
    title="GMRES, using matrix-free operator",
    xaxis="iteration",yaxis="resnorm")
```
